version: '3.8'

services:
  # MySQL
  db:
    image: mysql:8.0
    container_name: sdg_hub_db
    environment:
      MYSQL_ROOT_PASSWORD: SDG_Root@2025
      MYSQL_DATABASE: sdg_database
      MYSQL_USER: sdg_admin
      MYSQL_PASSWORD: SDG_Admin@2025
    volumes:
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - mysql_data:/var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  shadow-db:
    image: mysql:8.0
    container_name: sdg_shadow_db
    environment:
      MYSQL_ROOT_PASSWORD: SDG_Root@2025
      MYSQL_DATABASE: sdg_shadow_database
      MYSQL_USER: sdg_shadow_admin
      MYSQL_PASSWORD: SDG_Admin@2025
    volumes:
      - ./database/sdg_database_backup.sql:/docker-entrypoint-initdb.d/sdg_database_backup.sql
      - shadow_mysql_data:/var/lib/mysql
    ports:
      - "3308:3306"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    profiles:
      - shadow

  # Redis Channel Layer
  redis:
    image: redis:alpine
    container_name: sdg_hub_redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5
    command: redis-server --appendonly yes

  # Backend (ASGI + WebSocket)
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: sdg_hub_backend
    environment:
      - DATABASE_HOST=db
      - DATABASE_PORT=3306
      - DATABASE_NAME=sdg_database
      - DATABASE_USER=sdg_admin
      - DATABASE_PASSWORD=SDG_Admin@2025
      # - DATABASE_HOST=shadow-db
      # - DATABASE_PORT=3306
      # - DATABASE_NAME=sdg_shadow_database
      # - DATABASE_USER=sdg_shadow_admin
      # - DATABASE_PASSWORD=SDG_Admin@2025
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - DEBUG=False
      - ALLOWED_HOSTS=localhost,127.0.0.1,frontend,sdg_backend,149.28.177.238,sdg.unswzoo.com
    ports:
      - "8000:8000"
    volumes:
      - media_files:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sdg_hub_celery_worker
    environment:
      - DATABASE_HOST=db
      - DATABASE_PORT=3306
      - DATABASE_NAME=sdg_database
      - DATABASE_USER=sdg_admin
      - DATABASE_PASSWORD=SDG_Admin@2025
      # - DATABASE_HOST=shadow-db
      # - DATABASE_PORT=3306
      # - DATABASE_NAME=sdg_shadow_database
      # - DATABASE_USER=sdg_shadow_admin
      # - DATABASE_PASSWORD=SDG_Admin@2025
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    command: celery -A sdg_backend worker -l info
    volumes:
      - media_files:/app/media
    depends_on:
      - db
      - redis
    networks:
      - app-network

  # Frontend with SSL support
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sdg_hub_frontend
    environment:
      - REACT_APP_API_URL=https://sdg.unswzoo.com
      - REACT_APP_WS_URL=wss://sdg.unswzoo.com
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - backend
    networks:
      - app-network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot:latest
    container_name: sdg_certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --quiet; sleep 12h & wait $${!}; done;'"
    depends_on:
      - frontend

volumes:
  mysql_data:
  shadow_mysql_data:
  redis_data:
  media_files:

networks:
  app-network:
    driver: bridge